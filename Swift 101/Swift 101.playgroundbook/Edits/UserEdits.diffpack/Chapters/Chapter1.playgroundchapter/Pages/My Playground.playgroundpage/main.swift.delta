<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import UIKit

//Swift Diline Giriş

var greeting = "Hello, playground"
var str = "Hello World"
str = "Hello Youtube" //değişkeni var diye tanımladığımız için değiştirebiliyoruz.

let constStr = str //sabit bir değer olduğu için değiştirme imkanı yoktur.

//Array tanımlamanın 2 yolu bulunuyor.
var arrayOfInts: Array&lt;Int&gt;
//veya
//var arrayOfInts: [Int]

var dictionaryOfCapitalByCountry: Dictionary&lt;String,String&gt;
//veya
//var dictionaryOfCapitalByCountry: [String: String]

var winnigLotteryNumbers: Set&lt;Int&gt; //Küme yapısına benzer, aynı elemandan bir tane bulunuyor ama sıralamıyor.


//Değişkenin türünü öğrenebilmek için option tuşuna basılı halde değişken üstüne getirince mouse'ı türünü göstermektedir.

 //Swift'de objeden ziyade değer diye adlandırılıyor.(örnek verilenler)

let number = 43
let fmStation = 91.9

var countingUp = ["one", "two"]
let nameByParkingSpace = [18: "Eray", 9: "Zeynep"]

countingUp[1]

//Fonksiyonlar
let emptyString = String() //Boş bir string oluşturmuş oluyor, fonk. ile
let emptyArrayOfInts = Int()
let emptySetOfFloats = Set&lt;Float&gt;()

let defaultNumber = Int()
let defaultBool = Bool()

let meaningOfLife = String(number)

let defaultFloat = Float()
//let float2FromLiteral: Float = 32.8

countingUp.count
emptyString.isEmpty

countingUp.append("three")

//Swift programla dili unicode destekleyen bir dildir, bu da Türkçe karakterlerde değer adı vermemize olanak sağlamaktadır.
let kütüphane = "kütüphane"

var anOptionalFloat: Float? // ? burada bir muallak yaratıyor yani içinde bir değer olabilir de olmayabilir de anlamına geliyor ve "nil" olarak geri döndürüyor.

var anOptioanlArrayOfOptioanlFloats: [Float?]? //iç kısmındaki soru işareti içinde Float olan bir değer olabilir de olmayabilirde anlamına geliyor, dış kısmındaki soru işareti ise içinde float olan veya olmayan bir array olabilir de olmayabilir de anlamına gelmektedir.
//soru işaretini nereye koyarsak orada bir muallak yaratıyor.

var reading1: Float?
var reading2: Float?
var reading3: Float?

reading1 = 9.7
reading2 = 13.2
reading3 = 8.2

//let avgReading = (reading1 + reading2 + reading3) / 3
//bu durumda hata vermektedir, çünkü derleyici toplanan değerlerin içinde bir değer olup olmadığından emin olmak istiyor.
//bu durumun çözümü için ! kullanılır.
let avgReading = (reading1! + reading2! + reading3!) / 3
//bu, bunun içinde bir değer olduğunun garantisini veriyorum anlamına geliyor.

//ama ! kullanımı pek güvenli değil çünkü !'nin garantisi sağlanmazsa eğer program çöker, programdan atılırz. İstenmeyen bir durumdur ve kullanılması tavsiye edilmez.
// ! yerine if blokları miss

if let r1 = reading1,
    let r2 = reading2,
    let r3 = reading3{
    (r1 + r2 + r3)/3.0
} else {
    print("A reading is missing!")
}
//reading1 değerini r1'e ata ve eğer reading1 içerisinde bir değer varsa if bloğu çalışacaktır, yoksa else bloğuna girecektir. Böylelikle programın kapanması önelenir.

for i in 0..&lt;5 { //C tabanlı dillerden farklı bir gösterime sahip olmakla beraber 0'dan 5'e kadar 5 dahil olmamakla beraber sayıları yazdır anlamına geliyor
    print(i)
}

// (...) kullanılırsa 5 de dahil edilir.
for i in 0...5 {
    print(i)
}

for string in countingUp{
    print(string)
}

//indexli  bir şekilde gösterilmek istenirse,
for (index, string) in countingUp.enumerated() {
    print("\(index): \(string)")
}


//Swift'de 3 ana tip vardır
//3'ü de kendi değerleri, kendi fonksiyonları olabilir.
//Enum'lar bir değerin true ya da false dışında kesin belli olduğu durumlarda kullanılır, bir liste olarak da adlandırılabilir.
//içersinde kesin değerler olduğunda kullanılır.
enum PieType{
    case apple
    case peach
    case apricot
    
    //var pieCount: Int
}
// 3 tür turta oluğ başka yoksa enum kullanılabilir.
let favoritePie = PieType.peach

//enum'ların en verimli kullanıldığı yerleden biri de Switch-Case yapısıdır.
let name: String
switch favoritePie {
case .apple:
    name = "Apple Pie"
case .apricot:
    name = "Apricot Pie"
case .peach:
    name = "Peach Pie"
}
//Referans tip bir objedir. Hafızada belli bir değer tutar class, hafızadaki değer değişiyor bir değişim olduğunda
class ClassName {
    //var pieCount: Int
}

//Value tip bir objedir. memory de kopyalanıyor, kopyası üzerinde çalışılınıyor.
struct StructName {
    //var pieCount: Int
}
</string>
			<key>ModifiedRange</key>
			<string>{1, 4292}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
